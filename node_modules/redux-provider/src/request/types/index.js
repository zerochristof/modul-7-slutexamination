// @flow

export const CancelTokenType = (async () => {
  const { CancelToken } = await import( /* chunkHash */ 'axios')
  return typeof CancelToken
})

export const HttpAgentType = (async () => {
  const { Agent } = await import( /* chunkHash */ 'https')
  return typeof Agent
})

export interface Response {
  data: Object | string | number | Array;
  status: number;
  statusText: string;
  headers: Object;
  config: Object;
  request: XMLHttpRequest;
}

export interface TransformRequest {
  method(data: any, headers: Object): any;
}

export interface TransformResponse {
  method(data: any): any;
}

export interface Headers {
  [key: string]: string;
}

export interface Parameters {
  [key: string | number]: string | number;
}

export interface Options {
  [key: string | number]: string | number;
}

export interface Data {
  [key: string | number]: string | number | Array | Object;
}

export interface Payload {
  [key: string | number]: string | number | Array | Object;
}

export interface Auth {
  username: string | number;
  password: string | number;
}

export interface ParameterSerializer {
  method(params: any): string;
}

export interface Adapter {
  method(config: any): any;
}

export interface Progress {
  method(progressEvent: any): any;
}

export interface Validate {
  method(status: number): boolean;
}

export interface Proxy {
  host: string;
  port: number;
  auth: Auth;
}

export interface Request {
  url: string;
  method: string;
  baseURL?: string;
  transformRequest?: TransformRequest;
  transformResponse?: TransformResponse;
  headers?: Headers;
  params?: Parameters;
  paramsSerializer?: ParameterSerializer;
  data?: Data;
  payload?: Payload;
  timeout?: number;
  withCredentials?: boolean;
  adapter?: Adapter;
  auth?: Auth;
  responseType?: string;
  xsrfCookieName?: string;
  xsrfHeaderName?: string;
  onUploadProgress?: Progress;
  onDownloadProgress?: Progress;
  maxContentLength?: number;
  validateStatus?: Validate;
  maxRedirects?: number;
  socketPath?: string;
  httpAgent?: HttpAgentType;
  httpsAgent?: HttpAgentType;
  proxy?: Proxy;
  cancelToken?: CancelTokenType;
  effect?: any;
}