// @flow

import {
  get,
  merge
} from 'lodash'

import {
  create,
  CancelToken
} from 'axios'

import {
  createStoreReducer
} from '../store/redux-helpers'

import {
  createRequest
} from './state'

import {
  Defaults
} from '../types'
import {
  Action
} from '../store/states/types'

export default class Request {
  constructor(baseURL: string, token: string, props?: requestOptions) {
    const store = createStoreReducer()
    const source = CancelToken.source()
    const opts = props || {}
    const client = create(merge({
      defaults: {
        baseURL: baseURL,
        timeout: opts.timeout || 7500,
      },
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    }, opts || {}))
    this.store = store
    this.source = source
    this.client = client
  }

  request = async (action: Action, requestOptions: Defaults) => {
    const act = action
    const opts = requestOptions
    const {
      method = 'get',
      url,
      params = {},
      type,
      source,
      token,
      data
    } = opts

    const sourceToken = this.source.token;

    const response = await this.client[method](url, {
      ...params,
      access_token: token,
      cancel_token: sourceToken,
    })

    const store = await this.store.next({
        payload: response,
        type: act.type
      },
      act)
    return response
  }
}