// @flow
import {
  identity,
} from 'lodash'

import * as effects from 'redux-saga/effects'

import { Request } from '../../types'
import { Action } from '../../store/states/types'

function* stateWorker(requestOptions: Request): Promise<Action> {
  const {
    effect = 'takeLatest',
    errorEffect = 'takeLatest',
    errorType = null,
    type,
    request,
  } = requestOptions
  try {
    const state = ((async) => { return async () => {
      const { value } = await request.next()
      return () => {
        effects[effect]({
          type: type,
          payload: value
        })
      }
    }})(async)
    yield state
  } catch (e) {
    if (errorType) {
      requestOptions.data = e.message
      yield effects[errorEffect]({
        type: errorType,
        payload: requestOptions
      })
    }
  }
}

class RequestQueue {
  constructor() {
    this.all = []
    this.id = -1
  }
  createRequest(call) {
    this.all.push({
      call: call,
      id: this.id++,
    })
    const next: Object<{ next: call, id: number }> = {
      next: call,
      id: this.id
    }
    return next
  }
}

const queue = new RequestQueue()

export function* createRequest(requestOptions) {
  const { effect = 'takeLatest' } = requestOptions
  requestOptions.request =  queue.all[queue.all.lenth - 1]
  yield queue.createRequest(
    effects[effect](
      identity,
      effects['call'](stateWorker, requestOptions),
    )
  )
}

export function* requests() {
  yield queue.all[queue.all.lenth - 1]
}
